using System;
using CoPilot.ORM.Common;
using CoPilot.ORM.Database;
using CoPilot.ORM.Database.Commands;
using CoPilot.ORM.Database.Commands.Options;
using CoPilot.ORM.Scripting;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace CoPilot.ORM.IntegrationTests
{
    [TestClass]
    public class BuildTestDatabase
    {
        [TestClass]
        public class BuildDatabase
        {
            private const string DbName = "CoPilotTest";

            [TestMethod]
            public void DropCreateDatabase()
            {
                CoPilotGlobalResources.LoggingLevel = LoggingLevel.Verbose;

                var db = TestDbConfig.CreateDb(@"
                data source=localhost; 
                initial catalog=master; 
                Integrated Security=true;
                MultipleActiveResultSets=True; 
                App=CoPilotIntegrationTest;");
                var scriptBuilder = new ScriptBuilder(db.Model);
                db.Command(CreateDatabaseScript(scriptBuilder));

                //seed data
                Seed(db, scriptBuilder);
            }

            private string CreateDatabaseScript(ScriptBuilder builder)
            {
                const string databaseName = DbName;
                var block = new ScriptBlock();
                var createOptions = CreateOptions.Default();

                var go = builder.Go();

                //start
                block.Append(builder.MultiLineComment("Autogenerated script for CoPilot test database"));

                //initialize database
                block.Append(
                    builder.DropCreateDatabase(databaseName)
                );
                block.Append(go);
                block.Append(
                    builder.UseDatabase(databaseName)
                );
                block.Append(go);

                //create all tables
                block.Append(
                    builder.CreateTablesIfNotExists(createOptions)
                );
                return block.ToString();
            }

            public void Seed(IDb db, ScriptBuilder builder)
            {
                //var options = new ScriptOptions { EnableIdentityInsert = false, SelectScopeIdentity = true, UseNvar = true, Parameterize = true };
                using (var writer = new DbWriter(db) {Operations = OperationType.All})
                {
                    try
                    {
                        var script = builder.UseDatabase(DbName);
                        writer.ExecuteCommand(script.ToString());

                        //Seed

                        writer.Commit();
                    }
                    catch (Exception ex)
                    {
                        writer.Rollback();
                        Assert.Fail(ex.Message);
                    }
                }


            }
        }
    }
}
